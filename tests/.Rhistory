}
for (i in 1:7178)
{
if (qpred$class[i] == testpc$V1)
{
qmiss[i] = 1
else
qmiss[i] = 0
}
}
for (i in 1:7178)
{
if (qpred$class[i] == testpc$V1)
{
qmiss[i] = 1
}
else
{
qmiss[i] = 0
}
}
[]
qmiss = NULL
for (i in 1:7178)
{
if (qpred$class[i] == testpc$V1)
{
qmiss[i] = 1
}
else
{
qmiss[i] = 0
}
}
qmiss
average(qmiss)
mean(qmiss)
qpred$class
testpc$V1
idx = which(testpc$V1 == qpred$class)
idx
idx = which(testpc$V1 != qpred$class)
qprob
View(qprob)
qwrong = qprob[idx,]
qwrong$max = qwrong[,qwrong==max(qwrong)]
for (i in 1:7178)
{
qwrong$max[i] = max(qwrong[i,])
}
qwrong[1,]
max(qwrong[1,])
View(qwrong)
for (i in 1:7178)
{
qwrong[i,8] = max(qwrong[i,])
}
for (i in 1:7178)
{
qwrong[i,] = cbind(qwrong[i,],max(qwrong[i,]))
}
qwrong = as.data.frame(qprob[idx,])
for (i in 1:7178)
{
qwrong[i,] = max(qwrong[i,])
}
View(qwrong)
sortedq  <-qwrong[order(-0),]
View(sortedq)
View(qwrong)
qwrong$0
qwrong$"0"
t = sortedq[,1]
sortedq  <-qwrong[order(-t),]
View(sortedq)
t
t = sortedq[1,]
t
t = sortedq[,1]
t
sortedq  <-qwrong[order(-`0`),]
sortedq  <-qwrong[order(-sortedq$`0`),]
qwrong$max = qwrong[,qwrong==max(qwrong[])]
View(qwrong)
sortedq  <-qwrong[order(-qwrong$`0`),]
View(sortedq)
qpred$posterior
View(qprob)
idx = which(testpc$V1 != qpred$class)
4388/7178
qwrong = as.data.frame(qprob[idx,])
for (i in 1:7178)
{
qwrong[i,] = max(qwrong[i,])
}
View(qwrong)
sortedq  <-qwrong[order(-qwrong$`0`),]
View(sortedq)
order(-qwrong$`0`)
idx = which(testpc$V1 != qpred$class)
qwrong = as.data.frame(qprob[idx,])
for (i in 1:4636)
{
qwrong[i,] = max(qwrong[i,])
}
sortedq  <-qwrong[order(-qwrong$`0`),]
View(sortedq)
qprob = qpred$posterior
idx = which(testpc$V1 != qpred$class)
qwrong = as.data.frame(qprob[idx,])
for (i in 1:4388)
{
qwrong[i,] = max(qwrong[i,])
}
sortedq  <-qwrong[order(-qwrong$`0`),]
View(sortedq)
for (i in 1:4388)
{
qs[i,] = max(qwrong[i,])
}
qs = NULL
for (i in 1:4388)
{
qs[i,] = max(qwrong[i,])
}
for (i in 1:4388)
{
qs[i] = max(qwrong[i,])
}
sortedq  <-qs[order(qs)]
sortedq  <-as.data.frame(qs[order(qs)])
View(sortedq)
qprob = qpred$posterior
idx = which(testpc$V1 != qpred$class)
qwrong = as.data.frame(qprob[idx,])
for (i in 1:4388)
{
qwrong[i,] = max(qwrong[i,])
}
sortedq  <-as.data.frame(qwrong[order(qwrong[order(qwrong$`0`),])])
sortedq  <-as.data.frame(qwrong[order(qwrong$`0`),])
View(sortedq)
qcand = row.names(sortedq[1:50,])
plot_face = function(xx)
{
xx = xx[length(xx):1]
xt = array(t(xx),c(48,48))
xt = xt[48:1,]
image(xt, col=gray.colors(256, gamma = 1, start=0, end=1))
}
plot_face(1)
View(sortedq)
qcand
for (q in qcand)
{
plot_face(data[as.numeric(qcand),])
}
qcand
data$y[as.numeric(qcand)]
for (q in as.numeric(qcand)
{
plot_face(data[q,])
}
for (q in as.numeric(qcand))
{
plot_face(data[q,])
}
length(qpred)
attributes(qpred)
length(qpred$class)
t = qpred$class
t = as.data.frame(t)
View(t)
qcomp = cbind(data$y[as.numeric(qcand)],qpred$class[as.numeric(qcand)-28709]
qcomp = cbind(data$y[as.numeric(qcand)],qpred$class[as.numeric(qcand)-28709])
qcomp = cbind(data$y[as.numeric(qcand)],qpred$class[as.numeric(qcand)-28709])
View(qcomp)
idx
for (q in as.numeric(qcand))
{
plot_face(data[q,])
title(main=paste("Prediction ", as.character(qpred$class[q-28709]), " | Class: ", as.character(data$y[q])))
}
length(sorted(q))
length(sortedq)
length(sortedq[,:])
length(sortedq[,1])
qcand = row.names(sortedq[length(sortedq[,1])-50:length(sortedq[,1]),])
for (q in as.numeric(qcand))
{
plot_face(data[q,])
title(main=paste("Prediction ", as.character(qpred$class[q-28709]), " | Class: ", as.character(data$y[q])))
}
qcand = row.names(sortedq[4388-50:4388,])
length(qcand)
sortedq  <-as.data.frame(qwrong[order(-qwrong$`0`),])
View(sortedq)
View(qprob)
sortedq[1]
sortedq[1][1]
sortedq[1,]
sortedq[1,1]
i=0
for (q in as.numeric(qcand))
{
i = i+1
plot_face(data[q,])
title(main=paste("Posterior",as.character(sortedq[i,1]),"Prediction ", as.character(qpred$class[q-28709]), " | Class: ", as.character(data$y[q])))
}
qcand
qcand = row.names(sortedq[1:50,])
qcand
for (q in as.numeric(qcand))
{
plot_face(data[q,])
title(main=paste("Prediction ", as.character(qpred$class[q-28709]), " | Class: ", as.character(data$y[q])))
}
qprob = qpred$posterior
idx = which(testpc$V1 != qpred$class)
qwrong = as.data.frame(qprob[idx,])
for (i in 1:4388)
{
qwrong[i,] = max(qwrong[i,])
}
sortedq  <-as.data.frame(qwrong[order(-qwrong$`0`),])
qcand = row.names(sortedq[1:50,])
for (q in as.numeric(qcand))
{
plot_face(data[q,])
title(main=paste("Prediction ", as.character(qpred$class[q-28709]), " | Class: ", as.character(data$y[q])))
}
ste
require(mice)
data = as.data.frame(cbind(x1.mar,x2.mar,x3.mar))
data$x1.mar = as.factor(data$x1.mar)
nrep = 500
params = NULL
ste = NULL
for (i in 1:nrep)
{
imp_pmm = mice(data)
pooled = pool(with(imp_pmm,glm(x1.mar~x2.mar+x3.mar,family=binomial)))
s = summary(pooled)
params = rbind(params,s[,"est"])
ste = rbind(ste,s[,"se"])
}
load("E:/mice.RData")
require(mice)
data = as.data.frame(cbind(x1.mar,x2.mar,x3.mar))
data$x1.mar = as.factor(data$x1.mar)
nrep = 500
params = NULL
ste = NULL
for (i in 1:nrep)
{
imp_pmm = mice(data)
pooled = pool(with(imp_pmm,glm(x1.mar~x2.mar+x3.mar,family=binomial)))
s = summary(pooled)
params = rbind(params,s[,"est"])
ste = rbind(ste,s[,"se"])
}
write.csv(params,"rparams_bayes",row.names=FALSE)
write.csv(ste,"rstd_bayes",row.names=FALSE)
params
rparams_bayes <- read.csv("~/rparams_bayes")
View(rparams_bayes)
mean(rparams_bayes)
mean(rparams_bayes$X.Intercept.)
mean(rparams_bayes$x2.mar)
mean(rparams_bayes$x3.mar)
st(rparams_bayes$x3.mar)
std(rparams_bayes$x3.mar)
sd(rparams_bayes$x3.mar)
sd(rparams_bayes$x2.mar)
sd(rparams_bayes$X.Intercept.)
rstd_bayes <- read.csv("~/rstd_bayes")
View(rstd_bayes)
mean(rstd_bayes$X.Intercept.)
mean(rstd_bayes$x2.mar)
mean(rstd_bayes$x3.mar)
rparams_pmm <- read.csv("~/rparams_pmm.csv")
View(rparams_pmm)
sd(rparams_pmm$X.Intercept.)
sd(rparams_pmm$x2.mar)
sd(rparams_pmm$x3.mar)
mean(rparams_pmm$X.Intercept.)
mean(rparams_pmm$x2.mar)
mean(rparams_pmm$x3.mar)
rstd_pmm <- read.csv("~/rstd_pmm.csv")
View(rstd_pmm)
mean(rstd_pmm$x3.mar)
mean(rstd_pmm$x2.mar)
require(mice)
data = as.data.frame(cbind(x1.mar,x2.mar,x3.mar))
data$x1.mar = as.factor(data$x1.mar)
nrep = 500
params = NULL
ste = NULL
for (i in 1:nrep)
{
imp_pmm = mice(data,method="pmm")
pooled = pool(with(imp_pmm,glm(x1.mar~x2.mar+x3.mar,family=binomial)))
s = summary(pooled)
params = rbind(params,s[,"est"])
ste = rbind(ste,s[,"se"])
}
write.csv(params,"rparams_bayes",row.names=FALSE)
write.csv(ste,"rstd_bayes",row.names=FALSE)
rstd_bayes <- read.csv("~/rstd_bayes")
View(rstd_bayes)
rparams_bayes <- read.csv("~/rparams_bayes")
View(rparams_bayes)
mean(rparams_bayes$X.Intercept.)
mean(rparams_bayes$x2.mar)
mean(rparams_bayes$x3.mar)
sd(rparams_bayes$X.Intercept.)
sd(rparams_bayes$x2.mar)
sd(rparams_bayes$x3.mar)
mean(rstd_bayes$X.Intercept.)
mean(rstd_bayes$x2.mar)
mean(rstd_bayes$x3.mar)
setwd("C:/Users/Frank/Documents/Python Scripts")
require(mice)
data = read.csv("test_vs_r.csv")
imp = mice(data, m=20, method="pmm", maxit=20)
fit = with(data=imp,exp=lm(Y ~ X1 + X2 + X3))
pooled = pool(fit)
print(summary(pooled))
require(mvtnorm)
setwd("C:/Users/Frank/Documents/GitHub/statsmodels/statsmodels/sandbox/examples")
size = 1000
cor = 0.9
mu = rep(0,3)
sig = matrix(cor, nrow=3, ncol=3) + diag(3) * (1-cor) #Generate covariance matrix for normal
draws = rmvnorm(n=size, mean=mu, sigma=sig)
unidraws = pnorm(draws) #Apply probability integral transform to get uniform draws
normdraws = draws[,1] #Draw from original normal
berndraws = qbinom(1-unidraws[,2], 1, 0.75) #Inverse Bernoulli cdf using uniform draws
poisdraws = qpois(unidraws[,3], 5) #Inverse Poisson cdf using uniform draws
y<--1+1*berndraws-1*normdraws+1*poisdraws+rnorm(size,0,1) #Simulate linear regression to get conditional behavior in missingness rate
alpha.1<-exp(-16+2*y-normdraws)/(1+exp(-16+2*y-normdraws))
alpha.2<-exp(-3.5+.7*y)/(1+exp(-3.5+.7*y))
alpha.3<-exp(-6+1.2*y-berndraws)/(1+exp(-6+1.2*y-berndraws))
r.berndraws.mar<-rbinom(size,1,prob=alpha.1)
r.normdraws.mar<-rbinom(size,1,prob=alpha.2)
r.poisdraws.mar<-rbinom(size,1,prob=alpha.3)
berndraws.mar<-berndraws*(1-r.berndraws.mar)+r.berndraws.mar*99999  #berndraws.mar=berndraws if not missing, 99999 if missing
normdraws.mar<-normdraws*(1-r.normdraws.mar)+r.normdraws.mar*99999
poisdraws.mar<-poisdraws*(1-r.poisdraws.mar)+r.poisdraws.mar*99999
berndraws.mar[berndraws.mar==99999]=NA #change 99999 to NA (R's notation for missing)
normdraws.mar[normdraws.mar==99999]=NA
poisdraws.mar[poisdraws.mar==99999]=NA
write.csv(cbind(berndraws.mar,normdraws.mar,poisdraws.mar), "missingfull.csv", row.names=FALSE)
require(mice)
data = read.csv("missingfull.csv")
imp = mice(data, m=20, method="pmm", maxit=20)
#  mod = glm(berndraws.mar ~ normdraws.mar + poisdraws.mar, data, family=binomial)
fit = with(data=imp,exp=glm(berndraws.mar ~ normdraws.mar + poisdraws.mar,family=binomial))
pooled = pool(fit)
print(summary(pooled))
data = read.csv("missingfull.csv")
mp.plot(data, y.order = TRUE, x.order = TRUE, gray.scale = TRUE)
info <- mi.info(data)
info
imp <- mi(data)
fit <- glm.mi(berndraws.mar ~ normdraws.mar, imp, family=binomial)
display(fit)
require(mi)
data = read.csv("missingfull.csv")
mp.plot(data, y.order = TRUE, x.order = TRUE, gray.scale = TRUE)
info <- mi.info(data)
info
imp <- mi(data)
fit <- glm.mi(berndraws.mar ~ normdraws.mar, imp, family=binomial)
display(fit)
setwd("C:/Users/Frank/Documents/")
N<-250;
x1<-rbinom(N,1,prob=.4)  #draw from a binomial dist with probability=.4
x2<-rnorm(N,0,1)         #draw from a normal dist with mean=0, sd=1
x3<-rnorm(N,-10,1)
y<--1+1*x1-1*x2+1*x3+rnorm(N,0,1)  #simulate linear regression data with a normal error (sd=1)
#Generate MAR data
alpha.1<-exp(16+2*y-x2)/(1+exp(16+2*y-x2));
alpha.2<-exp(3.5+.7*y)/(1+exp(3.5+.7*y));
alpha.3<-exp(-13-1.2*y-x1)/(1+exp(-13-1.2*y-x1));
r.x1.mar<-rbinom(N,1,prob=alpha.1)
r.x2.mar<-rbinom(N,1,prob=alpha.2)
r.x3.mar<-rbinom(N,1,prob=alpha.3)
x1.mar<-x1*(1-r.x1.mar)+r.x1.mar*99999  #x1.mar=x1 if not missing, 99999 if missing
x2.mar<-x2*(1-r.x2.mar)+r.x2.mar*99999
x3.mar<-x3*(1-r.x3.mar)+r.x3.mar*99999
x1.mar[x1.mar==99999]=NA                  #change 99999 to NA (R's notation for missing)
x2.mar[x2.mar==99999]=NA
x3.mar[x3.mar==99999]=NA
require(mice)
data = as.data.frame(cbind(x1.mar,x2.mar,x3.mar))
data$x1.mar = as.factor(data$x1.mar)
nrep = 500
params = array(0, nrep)
# for (i in 1:nrep):
# {
imp_pmm = mice(data, m=20, maxit=20, method="pmm")
fit = with(data=imp,exp=glm(berndraws.mar ~ normdraws.mar + poisdraws.mar,family=binomial))
pooled = pool(fit)
print(summary(pooled))
# }
setwd("C:/Users/Frank/Documents/GitHub/statsmodels/statsmodels/sandbox/mice/tests")
write.csv(cbind(pooled$u[1:20], pooled$u[81:100], pooled$u[161:180]), "cov.csv", row.names=FALSE)
write.csv(pooled$qhat, "params.csv", row.names=FALSE)
write.csv(data, "missingdata.csv", row.names=FALSE)
setwd("C:/Users/Frank/Documents/")
N<-250;
x1<-rbinom(N,1,prob=.4)  #draw from a binomial dist with probability=.4
x2<-rnorm(N,0,1)         #draw from a normal dist with mean=0, sd=1
x3<-rnorm(N,-10,1)
y<--1+1*x1-1*x2+1*x3+rnorm(N,0,1)  #simulate linear regression data with a normal error (sd=1)
#Generate MAR data
alpha.1<-exp(16+2*y-x2)/(1+exp(16+2*y-x2));
alpha.2<-exp(3.5+.7*y)/(1+exp(3.5+.7*y));
alpha.3<-exp(-13-1.2*y-x1)/(1+exp(-13-1.2*y-x1));
r.x1.mar<-rbinom(N,1,prob=alpha.1)
r.x2.mar<-rbinom(N,1,prob=alpha.2)
r.x3.mar<-rbinom(N,1,prob=alpha.3)
x1.mar<-x1*(1-r.x1.mar)+r.x1.mar*99999  #x1.mar=x1 if not missing, 99999 if missing
x2.mar<-x2*(1-r.x2.mar)+r.x2.mar*99999
x3.mar<-x3*(1-r.x3.mar)+r.x3.mar*99999
x1.mar[x1.mar==99999]=NA                  #change 99999 to NA (R's notation for missing)
x2.mar[x2.mar==99999]=NA
x3.mar[x3.mar==99999]=NA
require(mice)
data = as.data.frame(cbind(x1.mar,x2.mar,x3.mar))
data$x1.mar = as.factor(data$x1.mar)
nrep = 500
params = array(0, nrep)
# for (i in 1:nrep):
# {
imp_pmm = mice(data, m=20, maxit=20, method="pmm")
fit = with(data=imp,exp=glm(x1.mar~x2.mar+x3.mar,family=binomial,family=binomial))
pooled = pool(fit)
print(summary(pooled))
# }
setwd("C:/Users/Frank/Documents/GitHub/statsmodels/statsmodels/sandbox/mice/tests")
write.csv(cbind(pooled$u[1:20], pooled$u[81:100], pooled$u[161:180]), "cov.csv", row.names=FALSE)
write.csv(pooled$qhat, "params.csv", row.names=FALSE)
write.csv(data, "missingdata.csv", row.names=FALSE)
fit = with(data=imp,exp=glm(x1.mar~x2.mar+x3.mar,family=binomial,family=binomial))
fit = with(data=imp,exp=glm(x1.mar~x2.mar+x3.mar,family=binomial))
pooled = pool(fit)
print(summary(pooled))
# }
setwd("C:/Users/Frank/Documents/GitHub/statsmodels/statsmodels/sandbox/mice/tests")
write.csv(cbind(pooled$u[1:20], pooled$u[81:100], pooled$u[161:180]), "cov.csv", row.names=FALSE)
write.csv(pooled$qhat, "params.csv", row.names=FALSE)
write.csv(data, "missingdata.csv", row.names=FALSE)
fit = with(data=imp,exp=glm(x1.mar~x2.mar+x3.mar,family=binomial))
pooled = pool(fit)
fit
fit = with(data=imp_pmm,exp=glm(x1.mar~x2.mar+x3.mar,family=binomial))
pooled = pool(fit)
print(summary(pooled))
fit = with(data=imp,exp=glm(berndraws.mar ~ normdraws.mar ,family=binomial))
pooled = pool(fit)
print(summary(pooled))
require(mice)
data = read.csv("missingfull.csv")
imp = mice(data, m=20, method="pmm", maxit=20)
#  mod = glm(berndraws.mar ~ normdraws.mar + poisdraws.mar, data, family=binomial)
fit = with(data=imp,exp=glm(berndraws.mar ~ normdraws.mar ,family=binomial))
pooled = pool(fit)
print(summary(pooled))
require(mice)
data = read.csv("missingfull.csv")
imp = mice(data, m=20, maxit=20)
#  mod = glm(berndraws.mar ~ normdraws.mar + poisdraws.mar, data, family=binomial)
fit = with(data=imp,exp=glm(berndraws.mar ~ normdraws.mar ,family=binomial))
pooled = pool(fit)
print(summary(pooled))
setwd("C:/Users/Frank/Documents/")
N<-250;
x1<-rbinom(N,1,prob=.4)  #draw from a binomial dist with probability=.4
x2<-rnorm(N,0,1)         #draw from a normal dist with mean=0, sd=1
x3<-rnorm(N,-10,1)
y<--1+1*x1-1*x2+1*x3+rnorm(N,0,1)  #simulate linear regression data with a normal error (sd=1)
#Generate MAR data
alpha.1<-exp(16+2*y-x2)/(1+exp(16+2*y-x2));
alpha.2<-exp(3.5+.7*y)/(1+exp(3.5+.7*y));
alpha.3<-exp(-13-1.2*y-x1)/(1+exp(-13-1.2*y-x1));
r.x1.mar<-rbinom(N,1,prob=alpha.1)
r.x2.mar<-rbinom(N,1,prob=alpha.2)
r.x3.mar<-rbinom(N,1,prob=alpha.3)
x1.mar<-x1*(1-r.x1.mar)+r.x1.mar*99999  #x1.mar=x1 if not missing, 99999 if missing
x2.mar<-x2*(1-r.x2.mar)+r.x2.mar*99999
x3.mar<-x3*(1-r.x3.mar)+r.x3.mar*99999
x1.mar[x1.mar==99999]=NA                  #change 99999 to NA (R's notation for missing)
x2.mar[x2.mar==99999]=NA
x3.mar[x3.mar==99999]=NA
require(mice)
data = as.data.frame(cbind(x1.mar,x2.mar,x3.mar))
data$x1.mar = as.factor(data$x1.mar)
nrep = 500
params = array(0, nrep)
# for (i in 1:nrep):
# {
imp_pmm = mice(data, m=20, maxit=20, method="pmm")
fit = with(data=imp_pmm,exp=glm(x1.mar~x2.mar+x3.mar,family=binomial))
pooled = pool(fit)
print(summary(pooled))
# }
setwd("C:/Users/Frank/Documents/GitHub/statsmodels/statsmodels/sandbox/mice/tests")
write.csv(cbind(pooled$u[1:20], pooled$u[81:100], pooled$u[161:180]), "cov.csv", row.names=FALSE)
write.csv(pooled$qhat, "params.csv", row.names=FALSE)
write.csv(data, "missingdata.csv", row.names=FALSE)
